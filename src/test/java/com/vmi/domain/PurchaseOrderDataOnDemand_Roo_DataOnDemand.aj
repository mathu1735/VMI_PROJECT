// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.vmi.domain;

import com.vmi.domain.PurchaseOrder;
import com.vmi.domain.PurchaseOrderDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect PurchaseOrderDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PurchaseOrderDataOnDemand: @Component;
    
    private Random PurchaseOrderDataOnDemand.rnd = new SecureRandom();
    
    private List<PurchaseOrder> PurchaseOrderDataOnDemand.data;
    
    public PurchaseOrder PurchaseOrderDataOnDemand.getNewTransientPurchaseOrder(int index) {
        PurchaseOrder obj = new PurchaseOrder();
        setCreatedBy(obj, index);
        setCreatedDate(obj, index);
        setPOActive(obj, index);
        setPOCode(obj, index);
        setPOCurrentQuantity(obj, index);
        setPOQuantity(obj, index);
        setPOUsageQuantity(obj, index);
        setUpdatedBy(obj, index);
        setUpdatedDate(obj, index);
        return obj;
    }
    
    public void PurchaseOrderDataOnDemand.setCreatedBy(PurchaseOrder obj, int index) {
        String createdBy = "createdBy_" + index;
        obj.setCreatedBy(createdBy);
    }
    
    public void PurchaseOrderDataOnDemand.setCreatedDate(PurchaseOrder obj, int index) {
        Date createdDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreatedDate(createdDate);
    }
    
    public void PurchaseOrderDataOnDemand.setPOActive(PurchaseOrder obj, int index) {
        String POActive = "POActive_" + index;
        obj.setPOActive(POActive);
    }
    
    public void PurchaseOrderDataOnDemand.setPOCode(PurchaseOrder obj, int index) {
        String POCode = "POCode_" + index;
        obj.setPOCode(POCode);
    }
    
    public void PurchaseOrderDataOnDemand.setPOCurrentQuantity(PurchaseOrder obj, int index) {
        Double POCurrentQuantity = new Integer(index).doubleValue();
        obj.setPOCurrentQuantity(POCurrentQuantity);
    }
    
    public void PurchaseOrderDataOnDemand.setPOQuantity(PurchaseOrder obj, int index) {
        Double POQuantity = new Integer(index).doubleValue();
        obj.setPOQuantity(POQuantity);
    }
    
    public void PurchaseOrderDataOnDemand.setPOUsageQuantity(PurchaseOrder obj, int index) {
        Double POUsageQuantity = new Integer(index).doubleValue();
        obj.setPOUsageQuantity(POUsageQuantity);
    }
    
    public void PurchaseOrderDataOnDemand.setUpdatedBy(PurchaseOrder obj, int index) {
        String updatedBy = "updatedBy_" + index;
        obj.setUpdatedBy(updatedBy);
    }
    
    public void PurchaseOrderDataOnDemand.setUpdatedDate(PurchaseOrder obj, int index) {
        Date updatedDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setUpdatedDate(updatedDate);
    }
    
    public PurchaseOrder PurchaseOrderDataOnDemand.getSpecificPurchaseOrder(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        PurchaseOrder obj = data.get(index);
        Long id = obj.getId();
        return PurchaseOrder.findPurchaseOrder(id);
    }
    
    public PurchaseOrder PurchaseOrderDataOnDemand.getRandomPurchaseOrder() {
        init();
        PurchaseOrder obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return PurchaseOrder.findPurchaseOrder(id);
    }
    
    public boolean PurchaseOrderDataOnDemand.modifyPurchaseOrder(PurchaseOrder obj) {
        return false;
    }
    
    public void PurchaseOrderDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = PurchaseOrder.findPurchaseOrderEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'PurchaseOrder' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<PurchaseOrder>();
        for (int i = 0; i < 10; i++) {
            PurchaseOrder obj = getNewTransientPurchaseOrder(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
