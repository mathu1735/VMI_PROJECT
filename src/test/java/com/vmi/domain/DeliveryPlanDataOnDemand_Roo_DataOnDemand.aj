// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.vmi.domain;

import com.vmi.domain.DeliveryPlan;
import com.vmi.domain.DeliveryPlanDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect DeliveryPlanDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DeliveryPlanDataOnDemand: @Component;
    
    private Random DeliveryPlanDataOnDemand.rnd = new SecureRandom();
    
    private List<DeliveryPlan> DeliveryPlanDataOnDemand.data;
    
    public DeliveryPlan DeliveryPlanDataOnDemand.getNewTransientDeliveryPlan(int index) {
        DeliveryPlan obj = new DeliveryPlan();
        setCreatedBy(obj, index);
        setCreatedDate(obj, index);
        setDeliDate(obj, index);
        setDeliPOCode(obj, index);
        setDeliQuantity(obj, index);
        setDeliStatus(obj, index);
        setUpdatedBy(obj, index);
        setUpdatedDate(obj, index);
        return obj;
    }
    
    public void DeliveryPlanDataOnDemand.setCreatedBy(DeliveryPlan obj, int index) {
        String createdBy = "createdBy_" + index;
        obj.setCreatedBy(createdBy);
    }
    
    public void DeliveryPlanDataOnDemand.setCreatedDate(DeliveryPlan obj, int index) {
        Date createdDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreatedDate(createdDate);
    }
    
    public void DeliveryPlanDataOnDemand.setDeliDate(DeliveryPlan obj, int index) {
        Date DeliDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDeliDate(DeliDate);
    }
    
    public void DeliveryPlanDataOnDemand.setDeliPOCode(DeliveryPlan obj, int index) {
        String DeliPOCode = "DeliPOCode_" + index;
        obj.setDeliPOCode(DeliPOCode);
    }
    
    public void DeliveryPlanDataOnDemand.setDeliQuantity(DeliveryPlan obj, int index) {
        Double DeliQuantity = new Integer(index).doubleValue();
        obj.setDeliQuantity(DeliQuantity);
    }
    
    public void DeliveryPlanDataOnDemand.setDeliStatus(DeliveryPlan obj, int index) {
        String DeliStatus = "DeliStatus_" + index;
        obj.setDeliStatus(DeliStatus);
    }
    
    public void DeliveryPlanDataOnDemand.setUpdatedBy(DeliveryPlan obj, int index) {
        String updatedBy = "updatedBy_" + index;
        obj.setUpdatedBy(updatedBy);
    }
    
    public void DeliveryPlanDataOnDemand.setUpdatedDate(DeliveryPlan obj, int index) {
        Date updatedDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setUpdatedDate(updatedDate);
    }
    
    public DeliveryPlan DeliveryPlanDataOnDemand.getSpecificDeliveryPlan(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        DeliveryPlan obj = data.get(index);
        Long id = obj.getId();
        return DeliveryPlan.findDeliveryPlan(id);
    }
    
    public DeliveryPlan DeliveryPlanDataOnDemand.getRandomDeliveryPlan() {
        init();
        DeliveryPlan obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return DeliveryPlan.findDeliveryPlan(id);
    }
    
    public boolean DeliveryPlanDataOnDemand.modifyDeliveryPlan(DeliveryPlan obj) {
        return false;
    }
    
    public void DeliveryPlanDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = DeliveryPlan.findDeliveryPlanEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'DeliveryPlan' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<DeliveryPlan>();
        for (int i = 0; i < 10; i++) {
            DeliveryPlan obj = getNewTransientDeliveryPlan(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
